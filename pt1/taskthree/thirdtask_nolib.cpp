#include <cstdlib>
#include <iostream>

using namespace std;

extern const int evala;
extern const int evalb;
extern const int evalc;
extern const int evald;

extern float arif(int x1, int x2, int x3, int x4);

int main()
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   First task
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const int a = 15;
    const int b = 7;
    const int c = 32;
    const int d = 13;

//static_casting division
    cout << "\n\n Task1 \n Floating results of a*(b+(c/d)) are " << arif(a,b,c,d);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   Second task
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int queryvar; 

    cout << "\n\n Task2 \n Type in a variable: ";
    cin >> queryvar;

//ternary operation
    queryvar = (queryvar <= 21) ? (queryvar - 21) : (queryvar - 21)*2;

    cout << "\n Result is the following: " << queryvar;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   Third task
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const int dx = 3;
    const int dy = 3;
    const int dz = 3;

    int cube[dx][dy][dz] = {};
    int* cubpointer = &cube[0][0][0];  // I have set a point to a start of the array, so I could call whatever cell by offsetting the address

    cout << "\n\n Task3 \n middle cell of a cube is: " << cube[1][1][1];
    cout << "\n Enter a new integer value for the middle cell: ";

//offset by 9 through one dimension, and then by 4 through second to middle cell
    cin >> *(cubpointer+13);

    cout << "\n displaying all layers of a cube \n";
    for (int i = 0; i<dx; i++)
    {
        cout << "\n plane z-" << i+1 << ":";
        for (int j = 0; j<dy; j++)
        {
            cout << "\n";
            for (int k = 0; k<dz; k++)
                cout << cube[i][j][k] << " ";
        }
    }
  
    cout << "\n middle cell called through a pointer again: " << *(cubpointer+13);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   Fourth task
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    cout << "\n\n Task4 \n calling some external variables a: " << evala << ", b: " << evalb << ", c: " << evalc << ", d: " << evald;
    cout << "\n Now result is different: " << arif(evala, evalb, evalc, evald);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   return 0;
}